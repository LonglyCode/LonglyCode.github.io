<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 记忆和记忆的补完</title>
    <link>http://longlycode.github.io/post/</link>
    <description>Recent content in Posts on 记忆和记忆的补完</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>LonglyCode</copyright>
    <lastBuildDate>Mon, 16 Jul 2018 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="http://longlycode.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>博客迁移到 HUGO</title>
      <link>http://longlycode.github.io/post/blog/</link>
      <pubDate>Mon, 16 Jul 2018 16:01:23 +0800</pubDate>
      
      <guid>http://longlycode.github.io/post/blog/</guid>
      <description>迁移原因 之前不明白别人的博客为什么要迁移来迁移去，迁移完还要发一篇文章简述原因。 后来换了电脑之后，原来的博客代码丢了，才知道对于自己不熟悉而</description>
    </item>
    
    <item>
      <title>初识postgresql以及在Flask里面的关联使用</title>
      <link>http://longlycode.github.io/post/%E5%88%9D%E8%AF%86postgresql%E4%BB%A5%E5%8F%8A%E5%9C%A8flask%E9%87%8C%E9%9D%A2%E7%9A%84%E5%85%B3%E8%81%94%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 19 Apr 2016 00:50:21 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/%E5%88%9D%E8%AF%86postgresql%E4%BB%A5%E5%8F%8A%E5%9C%A8flask%E9%87%8C%E9%9D%A2%E7%9A%84%E5%85%B3%E8%81%94%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;起因发现同一个服务器上面有人安装了postgresql用来跑一个大型的应用，postgresql如雷贯耳，一直没机会接触，于是好奇折腾了起来。因为牵扯众多只挑重点来讲。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs完全补完计划（五）——歌剧魅影Elisp</title>
      <link>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92%E4%BA%94/</link>
      <pubDate>Sun, 28 Feb 2016 20:18:06 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92%E4%BA%94/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h2 id=&#34;闲话elisp&#34;&gt;闲话elisp&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;如果说emacs是一出庞大的歌剧，那么elisp则是撑起全场的主角，它犹如一道魅影，神秘、黑暗、引人入胜，在剧初以无以伦比的优雅身姿和独一无二的音色试图唤起观众的灵魂共鸣；当有人尝试接近它的时候，或许期望越大失望越大，藏在另一半面具下是人性特有的丑陋，是受世人侮辱唾弃后难掩的愤怒和敏感；而最后它高尚的选择和坚持让作为学习者的我们不断反思，什么叫做美？不是世俗的外在的可视的，是来源内在的人性之光，能够让灵魂起舞。事实上扯远了，不过大概总结了学习elisp的三个阶段，首先被洗脑认为lisp系语言如同武林传说中的秘籍邪典，迷迷糊糊建立了莫名的崇拜，后来深入学习才发现lisp系语言有固有的缺陷，致使它们在现代背景下难有立足之地，最后在完全了解它们了，发现在语言演变的历史长河它们是那么的独一无二，具有难以言表在时间的美，仿佛洞开了一个新世界。lisp相对现在很古老，在这期间有很多篇文章试图向别人灌输它的思想，这篇文章也是其中一篇，但lisp系语言太庞大，就elisp本身的官方手册都有一千多页，要在一篇文章里面完全展现它是不现实的，只能按笔者自己的有限理解来书写，可能夹杂着不恰当的比喻，希望观者有所悟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs完全补完计划(四)--API大考古</title>
      <link>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E5%9B%9B-1/</link>
      <pubDate>Fri, 19 Feb 2016 23:36:37 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E5%9B%9B-1/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;查找和学会使用API最好的方法是阅读官方文档，这篇文章着重讲一些emacs常用的概念和API惯用方法，之前提到的buffer、mode等都是从构架层次上来讲的，这次要具体的分析，所有编辑器的刚需都差不多，所以概念的东西都一样，重要的是如何使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs完全补完计划（三）——package的引入和管理</title>
      <link>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E4%B8%89/</link>
      <pubDate>Tue, 02 Feb 2016 23:30:39 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E4%B8%89/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h2 id=&#34;package说明&#34;&gt;package说明&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;emacs中package（包）和其他编辑器一样，把一些功能或者特性包装成为一个package。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;package存放在哪里&#34;&gt;package存放在哪里？&lt;/h3&gt;

&lt;p&gt;有package那么肯定需要知道存放在哪里，现在公认有两个稳定的仓库分别是ELPA和MELPA，当然也可以去emacswiki或者github 上直接下载。下面的程序在emacs24以上的版本下有用，将它加入到init.el文件里面去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;内置的package管理，emacs24以上的版本有用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;;将melpa仓库地址加入到package-archives这个列表变量里面&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://melpa.org/packages/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;;这个是国内一个elpa仓库镜像，速度更快一些，你懂得&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;package-archives&lt;/span&gt; 
    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;popkit&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://elpa.popkit.org/packages/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;;初始化package&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package-initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;;更新仓库里面的package&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;package-archive-contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package-refresh-contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs完全补完计划（二）——简单配置和设置</title>
      <link>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92%E4%BA%8C%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E5%92%8C%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 01 Feb 2016 23:34:00 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92%E4%BA%8C%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E5%92%8C%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h2 id=&#34;我们在谈论lisp的时候谈论什么&#34;&gt;我们在谈论lisp的时候谈论什么？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;很多emacs教程都想避开Emacs Lisp(下面简称elisp)，完全不可能，反而学习过程中会磕磕碰碰。其实lisp作为一个古老的语言，语法上确实相比现代语言看起来看起来怪异很多，但并不落后，反而有独到之处，简洁易懂。在函数式编程复兴的浪潮中，去了解函数编程的始祖显得意义非凡。之后的内容在配置过程中不断回顾elisp的语法和用法，先提三点：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emacs完全补完计划（一）——嘴炮和入门</title>
      <link>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E4%B8%80-1/</link>
      <pubDate>Thu, 28 Jan 2016 00:25:08 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E4%B8%80-1/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;交代一下背景，笔者在接触emacs之前只写过C，只使用过芯片厂商提供的开发环境，没有真正使用过IDE(Integrated Development Environment)，可以说是从零开始接触emacs。当然并不是一时的心血来潮，而是为了成为更好的程序猿，在不断接触linux、VIM、git过程中偶然接触了一门名为Lisp 的语言，其实也不算是偶然，而是买了一本名叫SICP的&amp;rdquo;编程入门书&amp;rdquo;，被Lisp的优(qi)雅(pa)语法深深吸引了，后来又听说emacs是用lisp一种方言作为拓展语言的，禁不住网上各种推销就去学习了被誉为神之编辑器的emacs。真是一步一坑，从此走上了一条不归路&amp;hellip;这一系列文章被称作教程，不如说是个人学习emacs经历总结回顾。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org-mode个人总结</title>
      <link>http://longlycode.github.io/post/org-mode%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 25 Jan 2016 22:48:14 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/org-mode%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;这是一份个人总结，并不能带你入门，我也曾尝试些一个教程，但不自信比这个中文教程好：&lt;a href=&#34;http://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html&#34;&gt;Org-mode 简明手册&lt;/a&gt;，翻译官方的 &lt;a href=&#34;http://orgmode.org/manual&#34;&gt;mini manual&lt;/a&gt;，有个最佳实践 &lt;a href=&#34;http://doc.norang.ca/org-mode.html&#34;&gt;organize your life plain text&lt;/a&gt;。Org 用来做 GTD 是极好的，它的绝对优势就是完全是纯文本的，所有的格式状态都是由一些符号和特殊字符组成，不依赖于任何的数据库，而且可自定义的东西太多，因为是纯文本的，许多格式定义可以都涉及到一些程序通用的表达式，对于程序猿是非常友好的，但对于普通人需要一定的学习成本。本文提炼了Org常用的功能和设置，作为备忘记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git使用小结</title>
      <link>http://longlycode.github.io/post/git%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 24 Jan 2016 23:40:05 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/git%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;!-- toc --&gt;

&lt;h2 id=&#34;git-一些原理和概念&#34;&gt;git 一些原理和概念&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;在本地有三个区域：工作区，staged 区以及本地仓库，当然还有一个抽象的概念的就是分支&lt;/li&gt;
&lt;li&gt;远程有：远程仓库和分支&lt;/li&gt;
&lt;li&gt;HEAD 是个指针，指向 git 自动帮我们创建的第一个分支 master。master 才指向提交的，提交到远程
&amp;gt; 几乎所有的操作的都是基于以上的区域的，值得一提一点：本地的 git 仓库和 github 仓库之间的传输是通过 SSH 加密的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python进阶知识总览</title>
      <link>http://longlycode.github.io/post/python%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88/</link>
      <pubDate>Thu, 21 Jan 2016 17:52:11 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/python%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;有些人学完python之后不知道能干些什么或者要干些什么，实际上python本身语言很容易入门，如果不是&lt;strong&gt;按需学习&lt;/strong&gt;就无法更上一层。正如有人抱怨的如今学完一门成熟的语言其实不难，难的是需要花费很多时间去了解它的生态，比如内置库还有第三方库的用法，以及各种成型的流行的框架的使用。有个网站统计开源库所使用库的流行程度，链接在这里&lt;a href=&#34;http://www.programcreek.com/python/index/module/list&#34;&gt;python流行库排行&lt;/a&gt;。我也是通过这个网站才想到自己有了解过许多的库但是总是零零洒洒，不成体系，所以个人归纳分类了一下，决定每个库都要去实践和记录一下，好记性不如烂笔头。感兴趣的可以关注&lt;a href=&#34;http://longlycode.github.io/&#34;&gt;我的博客&lt;/a&gt;，会尽量把坑填完。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python基础零碎笔记</title>
      <link>http://longlycode.github.io/post/python%E5%9F%BA%E7%A1%80%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 20 Jan 2016 11:54:22 +0000</pubDate>
      
      <guid>http://longlycode.github.io/post/python%E5%9F%BA%E7%A1%80%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;这些是很久之前学python的时候零零散散记录了的一些笔记，现在看来很简单，整理了一下用于开篇的博文吧。python 是优雅的语言，但有些技巧和语法需要注意一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>